{"version":3,"file":"static/js/291.01000128.chunk.js","mappings":"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","sources":["components/weeks/week1/AssignmentInstructions.tsx","components/weeks/week1/assignment/Exercise1.tsx","components/weeks/week1/assignment/Exercise2.tsx","components/weeks/week1/assignment/Exercise3.tsx","components/weeks/week1/assignment/Exercise4.tsx","components/weeks/week1/assignment/Instructions.tsx","components/weeks/week1/assignment/TestingInstructions.tsx","../node_modules/@mui/icons-material/Lightbulb.js"],"sourcesContent":["// src/components/weeks/week1/AssignmentInstructions.tsx\r\n\r\nimport React from 'react';\r\nimport { Container, Box, } from '@mui/material';\r\nimport Introduction from \"./assignment/Instructions\";\r\nimport Exercise1 from \"./assignment/Exercise1\";\r\nimport Exercise2 from \"./assignment/Exercise2\";\r\nimport TestingInstructions from \"./assignment/TestingInstructions\";\r\nimport Exercise3 from \"./assignment/Exercise3\";\r\nimport Exercise4 from \"./assignment/Exercise4\";\r\n\r\n\r\n\r\nconst AssignmentInstructions: React.FC = () => {\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Introduction />\r\n                <Exercise1 />\r\n                <Exercise2 />\r\n                <Exercise3 />\r\n                <Exercise4 />\r\n                <TestingInstructions />\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AssignmentInstructions;\r\n","// src/components/weeks/week1/Exercise1.tsx\r\nimport React from 'react';\r\nimport { Typography, Box, List, ListItem, ListItemText, Collapse, Button } from '@mui/material';\r\nimport LightbulbIcon from '@mui/icons-material/Lightbulb';\r\n\r\n\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Exercise1: React.FC = () => {\r\n    const [showTip1, setShowTip1] = React.useState(false);\r\n    const [showTip2, setShowTip2] = React.useState(false);\r\n\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Exercise 1: Understanding the Random Module\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this exercise, you will learn about the `random` module in Python and use it to create a function that generates random planet names.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                The `random` module is a built-in module in Python that allows you to generate random numbers. You can use it to create random values for different types of data.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Here are some useful functions from the `random` module:\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. `random.random()` - Returns a random float between 0.0 and 1.0.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"2. `random.randint(a, b)` - Returns a random integer between `a` and `b` (inclusive).\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"3. `random.choice(seq)` - Returns a random element from the non-empty sequence `seq`.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"4. `random.uniform(a, b)` - Returns a random float between `a` and `b`.\" />\r\n                </ListItem>\r\n            </List>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Let's see an example of how to use the `random` module to generate a random planet name:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`import random\r\n\r\ndef generate_planet_name():\r\n    names = [\"jupiter\", \"mars\", \"venus\", \"earth\", \"saturn\", \"neptune\", \"uranus\", \"pluto\"]\r\n    return random.choice(names)\r\n\r\n# Example usage\r\nprint(generate_planet_name())`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"body1\" paragraph>\r\n                Your task is to create a function called `generate_planet_name` that uses the `random` module to generate random planet names. This function should return a string.\r\n                It should be able to generate more than <strong>1000 unique planet names</strong>. It should always start with a capital letter and have a length between 5 and 10 characters.\r\n                Obvious names like \"Earth\" or \"Mars\" should not be generated and you should not create an array of all possible planet names.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Ensure you return the generated name at the end of your function.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Once you have implemented the function, you can run the unit tests to verify its correctness. Open a terminal in your project's root directory and run the following command:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`python -m unittest discover -s tests -p 'test_main.py' -k test_generate_planet_name`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Template Code\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`import random\r\n\r\ndef generate_planet_name():\r\n    # Use random to generate a random planet name\r\n    pass`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Tips\r\n            </Typography>\r\n\r\n            <Button onClick={() => setShowTip1(!showTip1)} startIcon={<LightbulbIcon />}>\r\n                {showTip1 ? 'Hide Tip 1' : 'Show Tip 1'}\r\n            </Button>\r\n            <Collapse in={showTip1}>\r\n                <Box p={2} bgcolor=\"#d5f5e3\" borderRadius={4}>\r\n                    <Typography variant=\"body1\" paragraph display=\"flex\" alignItems=\"center\">\r\n                        <LightbulbIcon style={{ marginRight: 8 }} /> Tip 1: Think about how words are usually composed. For example, you can create a prefix and a suffix list and combine them to form names.\r\n                    </Typography>\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button onClick={() => setShowTip2(!showTip2)} startIcon={<LightbulbIcon />}>\r\n                {showTip2 ? 'Hide Tip 2' : 'Show Tip 2'}\r\n            </Button>\r\n            <Collapse in={showTip2}>\r\n                <Box p={2} bgcolor=\"#d5f5e3\" borderRadius={4}>\r\n                    <Typography variant=\"body1\" paragraph display=\"flex\" alignItems=\"center\">\r\n                        <LightbulbIcon style={{ marginRight: 8 }} /> Tip 2: You can use `random.choice` multiple times to pick different parts of the name.\r\n                    </Typography>\r\n                </Box>\r\n            </Collapse>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Exercise1;\r\n","// src/components/weeks/week1/Exercise2.tsx\r\nimport React from 'react';\r\nimport { Typography, Box, List, ListItem, ListItemText } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Exercise2: React.FC = () => {\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Exercise 2: Creating the `generate_planet` Function\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this exercise, you will define a function called `generate_planet` that creates a planet with random attributes. These attributes include:\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. Name: A randomly generated planet name.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"2. Size: A positive float representing the planet's size.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"3. Color: A randomly selected color from a predefined list.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"4. Orbit Distance: A positive float representing the distance from the star.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"5. Orbital Period: A positive float representing the time it takes for the planet to complete one orbit around the star.\" />\r\n                </ListItem>\r\n            </List>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Use the `random` module to generate random values for these attributes. Make sure the values meet the following requirements:\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. The name should be generated using your `generate_planet_name` function.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"2. The size, orbit distance, and orbital period should be positive floats.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"3. The color should be randomly chosen from a predefined list of color names using `random.choice`.\" />\r\n                </ListItem>\r\n            </List>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Here is a template to get you started:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`\r\nimport random\r\n\r\ndef generate_planet():\r\n    # Generate random attributes for the planet\r\n    # Ensure size, orbit distance, and orbital period are positive\r\n    pass\r\n                `}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"body1\" paragraph>\r\n                Ensure you return the generated planet dictionary at the end of your function.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Once you have implemented the function, you can run the unit tests to verify its correctness. Open a terminal in your project's root directory and run the following command:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`python -m unittest discover -s tests -p 'test_main.py' -k test_generate_planet`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Exercise2;\r\n","// src/components/weeks/week1/Exercise2.tsx\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Exercise3: React.FC = () => {\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Exercise 3: Create the `generate_solar_system` Function\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this exercise, you will define a function called `generate_solar_system` that generates a list of planets.\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Template Code\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`\r\ndef generate_solar_system(num_planets=8):\r\n    # Create a list to hold the planets\r\n    # Generate the specified number of planets using the generate_planet function\r\n    # Return the list of planets\r\n    pass\r\n                `}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"body1\" paragraph>\r\n                Once you have implemented the function, you can run the unit tests to verify its correctness. Open a terminal in your project's root directory and run the following command:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`python -m unittest discover -s tests -p 'test_main.py' -k test_generate_solar_system`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Exercise3;\r\n","// src/components/weeks/week1/Exercise3.tsx\r\nimport React from 'react';\r\nimport { Typography, Box, List, ListItem, ListItemText } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Exercise4: React.FC = () => {\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Exercise 4: Print the List of Planets\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this exercise, you will print the list of planets generated by the `generate_solar_system` function.\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. In your `planet_generation.py` file, add code to print the list of planets generated by the `generate_solar_system` function.\" />\r\n                </ListItem>\r\n            </List>\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Template Code\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`\r\nif __name__ == \"__main__\":\r\n    solar_system = generate_solar_system()\r\n    for planet in solar_system:\r\n        print(planet)\r\n                `}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Exercise4;\r\n","// src/components/weeks/week1/Introduction.tsx\r\nimport React from 'react';\r\nimport {Typography, Box, Button} from '@mui/material';\r\nimport JSZip from \"jszip\";\r\nimport { saveAs } from 'file-saver';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\n\r\nconst Introduction: React.FC = () => {\r\n    const downloadZip = async () => {\r\n        const zip = new JSZip();\r\n        const week1CodeFolder = zip.folder('week1_code');\r\n\r\n        // List of files to include in the zip\r\n        const files = [\r\n            'assignments/week1_code/src/__init__.py',\r\n            'assignments/week1_code/src/main.py',\r\n            'assignments/week1_code/tests/__init__.py',\r\n            'assignments/week1_code/tests/test_main.py'\r\n        ];\r\n\r\n        // Fetch each file and add to the zip\r\n        for (const filePath of files) {\r\n            const response = await fetch(`${process.env.PUBLIC_URL}/${filePath}`);\r\n            if (response.ok) {\r\n                const content = await response.text();\r\n                week1CodeFolder?.file(filePath.split('/').slice(-2).join('/'), content);\r\n            } else {\r\n                console.error(`Failed to fetch ${filePath}`);\r\n            }\r\n        }\r\n\r\n        const content = await zip.generateAsync({ type: 'blob' });\r\n        saveAs(content, 'week1_code.zip');\r\n    };\r\n\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                Week 1 Assignment: Basic Planet Generation\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this assignment, you will create a simple Python script to generate a list of planets with randomly generated attributes. Follow the steps below to complete the assignment and test your code.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                To get started, download the assignment code files:\r\n            </Typography>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={downloadZip}>\r\n                Download Assignment Code Files\r\n            </Button>\r\n            <Typography variant=\"body1\" paragraph>\r\n                The downloaded zip file will contain the following file:\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                main.py\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`import random\r\n\r\ndef generate_planet_name():\r\n    # ADD YOUR CODE HERE\r\n    pass\r\n\r\ndef generate_planet():\r\n    # ADD YOUR CODE HERE\r\n    pass\r\n\r\ndef generate_solar_system(num_planets=8):\r\n    # ADD YOUR CODE HERE\r\n    pass\r\n\r\ndef print_solar_system(solar_system):\r\n    # ADD YOUR CODE HERE\r\n    pass\r\n\r\nif __name__ == \"__main__\":\r\n    solar_system = generate_solar_system()\r\n    print_solar_system(solar_system)`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"body1\" paragraph>\r\n                Please modify the `main.py` file according to the instructions provided in the exercises below.\r\n            </Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Introduction;\r\n","// src/components/weeks/week1/TestingInstructions.tsx\r\nimport React from 'react';\r\nimport { Typography, Box, List, ListItem, ListItemText, Paper } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst TestingInstructions: React.FC = () => {\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Testing Your Code\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                To test your code, you can use the command line. Follow the steps below to run your Python script and verify that it works correctly.\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. Open a terminal or command prompt.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"2. Navigate to the directory where your `planet_generation.py` file is located.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"3. Run the following command to execute your script:\" />\r\n                </ListItem>\r\n            </List>\r\n            <Paper elevation={3} sx={{ padding: 2, backgroundColor: '#f5f5f5' }}>\r\n                <CopyBlock\r\n                    text=\"python planet_generation.py\"\r\n                    language=\"bash\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n            </Paper>\r\n            <Typography variant=\"body1\" paragraph>\r\n                You should see the list of generated planets printed in the terminal. Verify that the output matches the expected format and that the attributes are generated correctly.\r\n            </Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default TestingInstructions;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 21c0 .5.4 1 1 1h4c.6 0 1-.5 1-1v-1H9zm3-19C8.1 2 5 5.1 5 9c0 2.4 1.2 4.5 3 5.7V17c0 .5.4 1 1 1h6c.6 0 1-.5 1-1v-2.3c1.8-1.3 3-3.4 3-5.7 0-3.9-3.1-7-7-7\"\n}), 'Lightbulb');"],"names":["AssignmentInstructions","_jsx","Container","maxWidth","children","_jsxs","Box","my","Introduction","Exercise1","Exercise2","Exercise3","Exercise4","TestingInstructions","showTip1","setShowTip1","React","showTip2","setShowTip2","Typography","variant","component","gutterBottom","paragraph","List","ListItem","ListItemText","primary","CopyBlock","text","language","theme","dracula","codeBlock","Button","onClick","startIcon","LightbulbIcon","Collapse","in","p","bgcolor","borderRadius","display","alignItems","style","marginRight","color","async","zip","JSZip","week1CodeFolder","folder","files","filePath","response","fetch","concat","process","ok","content","file","split","slice","join","console","error","generateAsync","type","saveAs","Paper","elevation","sx","padding","backgroundColor","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}