{"version":3,"file":"static/js/9679.f8550e0f.chunk.js","mappings":"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","sources":["components/Questionnaire.tsx","components/weeks/week2/Lecture2Questionnaire.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Typography, Box, Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Alert } from '@mui/material';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\nexport interface Question {\r\n    question: string;\r\n    options: string[];\r\n    answer: string;\r\n    explanation: { [option: string]: string };\r\n    code?: string; // Optional code attribute\r\n}\r\n\r\ninterface QuestionnaireProps {\r\n    questions: Question[];\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ questions, onSuccess }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [isSuccessful, setIsSuccessful] = useState(false);\r\n\r\n    const handleChange = (questionIndex: number, option: string) => {\r\n        setSelectedAnswers({ ...selectedAnswers, [questionIndex]: option });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        setShowResults(true);\r\n        const allCorrect = questions.every((q, index) => selectedAnswers[index] === q.answer);\r\n        setIsSuccessful(allCorrect);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture Questionnaire\r\n                </Typography>\r\n                {questions.map((q, index) => (\r\n                    <Box key={index} my={2}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">{q.question}</FormLabel>\r\n                            {q.code && (\r\n                                <CopyBlock\r\n                                    text={q.code}\r\n                                    language=\"python\"\r\n                                    theme={dracula}\r\n                                    codeBlock\r\n                                />\r\n                            )}\r\n                            <RadioGroup\r\n                                name={`question-${index}`}\r\n                                value={selectedAnswers[index] || ''}\r\n                                onChange={(e) => handleChange(index, e.target.value)}\r\n                            >\r\n                                {q.options.map((option, i) => (\r\n                                    <FormControlLabel key={i} value={option} control={<Radio />} label={option} />\r\n                                ))}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {showResults && (\r\n                            <>\r\n                                {selectedAnswers[index] === q.answer ? (\r\n                                    <Alert severity=\"success\">Correct</Alert>\r\n                                ) : (\r\n                                    <Alert severity=\"error\">{q.explanation[selectedAnswers[index]]}</Alert>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                ))}\r\n                {!isSuccessful &&<Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>}\r\n                {showResults && isSuccessful && (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onSuccess} style={{ marginTop: '16px' }}>\r\n                        Continue\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Questionnaire, {Question} from '../../Questionnaire';\r\nimport Lecture4Questionnaire from \"../week1/Lecture4Questionnaire\";\r\n\r\nconst questions: Question[] = [\r\n    {\r\n        question: \"1. What is the default mode when opening a file using the open() function in Python?\",\r\n        options: [\"r\", \"w\", \"a\", \"b\"],\r\n        answer: \"r\",\r\n        explanation: {\r\n            \"w\": \"Incorrect. 'w' mode is for writing and will truncate the file if it exists.\",\r\n            \"a\": \"Incorrect. 'a' mode is for appending to the file if it exists.\",\r\n            \"b\": \"Incorrect. 'b' mode is for binary mode.\",\r\n            \"r\": \"Correct. 'r' mode is for reading, which is the default mode.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"2. Which of the following methods is used to read a file line by line?\",\r\n        options: [\"read()\", \"readlines()\", \"readline()\", \"write()\"],\r\n        answer: \"readline()\",\r\n        explanation: {\r\n            \"read()\": \"Incorrect. read() reads the entire file at once.\",\r\n            \"readlines()\": \"Incorrect. readlines() reads all the lines into a list.\",\r\n            \"readline()\": \"Correct. readline() reads one line at a time.\",\r\n            \"write()\": \"Incorrect. write() is used to write data to a file.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"3. What will be the output of the following code?\",\r\n        code: `with open('example.txt', 'w') as f:\r\n    f.write('Hello, world!')\r\nwith open('example.txt', 'r') as f:\r\n    print(f.read())`,\r\n        options: [\"Error\", \"Hello, world!\", \"Nothing\", \"example.txt\"],\r\n        answer: \"Hello, world!\",\r\n        explanation: {\r\n            \"Error\": \"Incorrect. The code will not throw an error.\",\r\n            \"Hello, world!\": \"Correct. The file is written with 'Hello, world!' and then read back.\",\r\n            \"Nothing\": \"Incorrect. The file has content which is read and printed.\",\r\n            \"example.txt\": \"Incorrect. The filename is not printed, the content of the file is.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"4. Which mode should be used to open a file for both reading and writing?\",\r\n        options: [\"r+\", \"w+\", \"a+\", \"rb+\"],\r\n        answer: \"r+\",\r\n        explanation: {\r\n            \"r+\": \"Correct. r+ opens the file for both reading and writing.\",\r\n            \"w+\": \"Incorrect. w+ truncates the file to zero length.\",\r\n            \"a+\": \"Incorrect. a+ opens the file for appending and reading.\",\r\n            \"rb+\": \"Incorrect. rb+ is for reading and writing in binary mode.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"5. What is wrong with the following code?\",\r\n        code: `with open('data.txt', 'r') as f:\r\n    f.write('Adding some text')`,\r\n        options: [\"Nothing\", \"File not opened\", \"Cannot write in read mode\", \"Incorrect file name\"],\r\n        answer: \"Cannot write in read mode\",\r\n        explanation: {\r\n            \"Nothing\": \"Incorrect. There is an issue in the code.\",\r\n            \"File not opened\": \"Incorrect. The file is opened.\",\r\n            \"Cannot write in read mode\": \"Correct. The file is opened in read mode, so writing is not allowed.\",\r\n            \"Incorrect file name\": \"Incorrect. The file name does not affect this operation.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"6. How do you ensure a file is properly closed after operations?\",\r\n        options: [\"Using close() method\", \"Using with statement\", \"Using try/finally block\", \"All of the above\"],\r\n        answer: \"All of the above\",\r\n        explanation: {\r\n            \"Using close() method\": \"Correct. Using close() manually closes the file.\",\r\n            \"Using with statement\": \"Correct. Using with statement ensures the file is closed automatically.\",\r\n            \"Using try/finally block\": \"Correct. Using try/finally block can ensure the file is closed in the finally block.\",\r\n            \"All of the above\": \"Correct. All methods can ensure a file is properly closed.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"7. What is the difference between 'r' and 'rb' modes in file handling?\",\r\n        options: [\"No difference\", \"'r' is for reading text, 'rb' is for reading binary\", \"'r' is for reading, 'rb' is for reading and writing\", \"'r' is for reading, 'rb' is for reading in append mode\"],\r\n        answer: \"'r' is for reading text, 'rb' is for reading binary\",\r\n        explanation: {\r\n            \"No difference\": \"Incorrect. There is a difference between 'r' and 'rb' modes.\",\r\n            \"'r' is for reading text, 'rb' is for reading binary\": \"Correct. 'r' is for reading text files, 'rb' is for reading binary files.\",\r\n            \"'r' is for reading, 'rb' is for reading and writing\": \"Incorrect. 'rb' is not for reading and writing.\",\r\n            \"'r' is for reading, 'rb' is for reading in append mode\": \"Incorrect. 'rb' is not for reading in append mode.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"8. What will be the output of the following code?\",\r\n        code: `with open('sample.txt', 'a') as f:\r\n    f.write('New line\\\\n')\r\nwith open('sample.txt', 'r') as f:\r\n    print(f.read())`,\r\n        options: [\"Error\", \"Overwrites content with 'New line'\", \"Appends 'New line' at the end\", \"Clears the file\"],\r\n        answer: \"Appends 'New line' at the end\",\r\n        explanation: {\r\n            \"Error\": \"Incorrect. The code will not throw an error.\",\r\n            \"Overwrites content with 'New line'\": \"Incorrect. 'a' mode appends to the file, it does not overwrite.\",\r\n            \"Appends 'New line' at the end\": \"Correct. 'a' mode appends the new content at the end of the file.\",\r\n            \"Clears the file\": \"Incorrect. 'a' mode does not clear the file.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"9. Which of the following code snippets will correctly read a file 'example.txt' and print each line with its line number?\",\r\n        code: `# Code Snippet A\r\nwith open('example.txt', 'r') as f:\r\n    for line in f:\r\n        print(line)\r\n\r\n# Code Snippet B\r\nwith open('example.txt', 'r') as f:\r\n    for line_number, line in enumerate(f, start=1):\r\n        print(f'{line_number}: {line}')\r\n        \r\n# Code Snippet C\r\nwith open('example.txt', 'r') as f:\r\n    lines = f.readlines()\r\n    for line in lines:\r\n        print(line)`,\r\n        options: [\"Code Snippet A\", \"Code Snippet B\", \"Code Snippet C\", \"None of the above\"],\r\n        answer: \"Code Snippet B\",\r\n        explanation: {\r\n            \"Code Snippet A\": \"Incorrect. This prints each line but does not include line numbers.\",\r\n            \"Code Snippet B\": \"Correct. This snippet includes line numbers in the output.\",\r\n            \"Code Snippet C\": \"Incorrect. This prints each line but does not include line numbers.\",\r\n            \"None of the above\": \"Incorrect. One of the snippets does print lines with line numbers.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"10. What will be the result of executing the following code?\",\r\n        code: `try:\r\n    with open('missing.txt', 'r') as f:\r\n        content = f.read()\r\nexcept FileNotFoundError:\r\n    print(\"File not found.\")\r\nfinally:\r\n    print(\"Execution complete.\")`,\r\n        options: [\"File not found.\", \"File not found.\\nExecution complete.\", \"Execution complete.\", \"Error\"],\r\n        answer: \"File not found.\\nExecution complete.\",\r\n        explanation: {\r\n            \"File not found.\": \"Incorrect. This will be printed, but 'Execution complete.' will also be printed due to the finally block.\",\r\n            \"File not found.\\nExecution complete.\": \"Correct. The except block handles the error and finally block prints 'Execution complete.'.\",\r\n            \"Execution complete.\": \"Incorrect. This will be printed but so will 'File not found.'\",\r\n            \"Error\": \"Incorrect. The error is handled by the except block.\"\r\n        }\r\n    }\r\n];\r\n\r\nconst Lecture2Questionnaire = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleSuccess = () => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['week2lecture2Questionnaire'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n        navigate('/week2/lecture3');\r\n    };\r\n\r\n    return <Questionnaire questions={questions} onSuccess={handleSuccess} />;\r\n};\r\n\r\nexport default Lecture2Questionnaire;\r\n"],"names":["_ref","questions","onSuccess","selectedAnswers","setSelectedAnswers","useState","showResults","setShowResults","isSuccessful","setIsSuccessful","_jsx","Container","maxWidth","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","map","q","index","FormControl","FormLabel","question","code","CopyBlock","text","language","theme","dracula","codeBlock","RadioGroup","name","concat","value","onChange","e","handleChange","questionIndex","option","target","options","i","FormControlLabel","control","Radio","label","_Fragment","answer","Alert","severity","explanation","Button","color","onClick","handleSubmit","allCorrect","every","style","marginTop","Lecture2Questionnaire","navigate","useNavigate","Questionnaire","handleSuccess","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify"],"sourceRoot":""}