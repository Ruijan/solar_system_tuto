{"version":3,"file":"static/js/8128.a11c9f93.chunk.js","mappings":"6NAOA,MAwHA,EAxH2BA,MACvBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,qBAAuB,MAChFJ,EAA2B,UAAI,EAC/BG,aAAaE,QAAQ,mBAAoBJ,KAAKK,UAAUN,GAAkB,GAC3E,KAGCO,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,MAAO,CAAEC,QAAS,IAAKC,UAC1BC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,EAAEH,SAAA,EACPJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,6CAGrDJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAC,wQAItCJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,kBAGrDC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAA,CAAC,iKAC2HJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,OAAU,MAACJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,SAAW,gCAA4BJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,SAAW,QAEhPJ,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CACNC,KAAI,kNAWJC,SAAS,SACTC,MAAOC,EAAAA,GACPC,WAAS,KAGblB,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,WAGrDC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAA,CAAC,wGACkEJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,QAAU,eAAWJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,UAAY,cAGrJJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,eAGrDC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAA,CAAC,MAChCJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,QAAU,oGAEtBJ,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CACNC,KAAI,0LAOJC,SAAS,SACTC,MAAOC,EAAAA,GACPC,WAAS,KAGblB,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,iBAGrDC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAA,CAAC,MAChCJ,EAAAA,EAAAA,KAAA,QAAAI,SAAM,UAAY,+EAExBJ,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CACNC,KAAI,4JAUJC,SAAS,SACTC,MAAOC,EAAAA,GACPC,WAAS,KAGblB,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,sCAGrDJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQG,WAAS,EAAAR,SAAC,4KAGtCJ,EAAAA,EAAAA,KAACa,EAAAA,GAAS,CACNC,KAAI,mOAUJC,SAAS,SACTC,MAAOC,EAAAA,GACPC,WAAS,KAGblB,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACa,GAAI,EAAEf,UACPJ,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CAACX,QAAQ,YAAYY,MAAM,UAAUX,UAAWY,EAAAA,GAAYC,GAAG,gCAA+BnB,SAAC,kC","sources":["components/weeks/week1/Lecture2.tsx"],"sourcesContent":["// src/components/weeks/week1/Lecture2.tsx\r\n\r\nimport React, {useEffect} from 'react';\r\nimport {Typography, Box, Button, Paper} from '@mui/material';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Lecture2: React.FC = () => {\r\n    useEffect(() => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['lecture2'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n    }, []);\r\n\r\n    return (\r\n        <Paper style={{ padding: 16 }}>\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture 2: Control Structures in Python\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    In this lecture, we will cover control structures in Python, including conditionals and loops. Control structures are a fundamental aspect of programming, allowing you to control the flow of your code based on conditions and to repeat actions multiple times.\r\n                </Typography>\r\n\r\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                    Conditionals\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Conditionals allow you to execute certain pieces of code based on whether a condition is true or false. The basic syntax for conditionals in Python includes <code>if</code>, <code>elif</code> (short for \"else if\"), and <code>else</code>.\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`\r\n# Example of conditionals in Python\r\ntemperature = 20\r\n\r\nif temperature > 30:\r\n    print(\"It's hot!\")\r\nelif temperature < 10:\r\n    print(\"It's cold!\")\r\nelse:\r\n    print(\"It's nice outside!\")\r\n          `}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n\r\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                    Loops\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Loops allow you to execute a block of code multiple times. Python supports two main types of loops: <code>for</code> loops and <code>while</code> loops.\r\n                </Typography>\r\n\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    For Loops\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    A <code>for</code> loop is used to iterate over a sequence (such as a list, tuple, dictionary, set, or string).\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`\r\n# Example of a for loop in Python\r\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\r\n\r\nfor planet in planets:\r\n    print(planet)\r\n          `}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    While Loops\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    A <code>while</code> loop is used to execute a block of code as long as a condition is true.\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`\r\n# Example of a while loop in Python\r\ncountdown = 5\r\n\r\nwhile countdown > 0:\r\n    print(countdown)\r\n    countdown -= 1\r\n\r\nprint(\"Blast off!\")\r\n          `}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n\r\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                    Combining Conditionals and Loops\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    You can combine conditionals and loops to perform more complex operations. For example, you might want to iterate over a list of numbers and print only the even ones.\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`\r\n# Combining conditionals and loops\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nfor number in numbers:\r\n    if number % 2 == 0:\r\n        print(f\"{number} is even\")\r\n    else:\r\n        print(f\"{number} is odd\")\r\n          `}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n\r\n                <Box mt={4}>\r\n                    <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/week1/lecture2/questionnaire\">\r\n                        Take the Questionnaire\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Lecture2;\r\n"],"names":["Lecture2","useEffect","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify","_jsx","Paper","style","padding","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","paragraph","CopyBlock","text","language","theme","dracula","codeBlock","mt","Button","color","RouterLink","to"],"sourceRoot":""}