{"version":3,"file":"static/js/9188.27600d12.chunk.js","mappings":"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","sources":["components/Questionnaire.tsx","components/weeks/week1/Lecture2Questionnaire.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Typography, Box, Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Alert } from '@mui/material';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\nexport interface Question {\r\n    question: string;\r\n    options: string[];\r\n    answer: string;\r\n    explanation: { [option: string]: string };\r\n    code?: string; // Optional code attribute\r\n}\r\n\r\ninterface QuestionnaireProps {\r\n    questions: Question[];\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ questions, onSuccess }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [isSuccessful, setIsSuccessful] = useState(false);\r\n\r\n    const handleChange = (questionIndex: number, option: string) => {\r\n        setSelectedAnswers({ ...selectedAnswers, [questionIndex]: option });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        setShowResults(true);\r\n        const allCorrect = questions.every((q, index) => selectedAnswers[index] === q.answer);\r\n        setIsSuccessful(allCorrect);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture Questionnaire\r\n                </Typography>\r\n                {questions.map((q, index) => (\r\n                    <Box key={index} my={2}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">{q.question}</FormLabel>\r\n                            {q.code && (\r\n                                <CopyBlock\r\n                                    text={q.code}\r\n                                    language=\"python\"\r\n                                    theme={dracula}\r\n                                    codeBlock\r\n                                />\r\n                            )}\r\n                            <RadioGroup\r\n                                name={`question-${index}`}\r\n                                value={selectedAnswers[index] || ''}\r\n                                onChange={(e) => handleChange(index, e.target.value)}\r\n                            >\r\n                                {q.options.map((option, i) => (\r\n                                    <FormControlLabel key={i} value={option} control={<Radio />} label={option} />\r\n                                ))}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {showResults && (\r\n                            <>\r\n                                {selectedAnswers[index] === q.answer ? (\r\n                                    <Alert severity=\"success\">Correct</Alert>\r\n                                ) : (\r\n                                    <Alert severity=\"error\">{q.explanation[selectedAnswers[index]]}</Alert>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                ))}\r\n                {!isSuccessful &&<Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>}\r\n                {showResults && isSuccessful && (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onSuccess} style={{ marginTop: '16px' }}>\r\n                        Continue\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Questionnaire, { Question } from '../../Questionnaire';\r\n\r\nconst questions: Question[] = [\r\n    {\r\n        question: 'Which keyword is used to start a conditional statement in Python?',\r\n        options: ['if', 'for', 'while', 'def'],\r\n        answer: 'if',\r\n        explanation: {\r\n            'if': 'Correct. The if keyword is used to start a conditional statement in Python.',\r\n            'for': 'Incorrect. The for keyword is used to start a for loop in Python.',\r\n            'while': 'Incorrect. The while keyword is used to start a while loop in Python.',\r\n            'def': 'Incorrect. The def keyword is used to define a function in Python.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What will the following code output?\\n\\nx = 10\\nif x > 5:\\n    print(\"Greater\")\\nelse:\\n    print(\"Smaller\")',\r\n        options: ['Greater', 'Smaller', 'Error', 'None'],\r\n        answer: 'Greater',\r\n        explanation: {\r\n            'Greater': 'Correct. Since x is 10 and greater than 5, \"Greater\" is printed.',\r\n            'Smaller': 'Incorrect. The condition x > 5 is true, so \"Greater\" is printed.',\r\n            'Error': 'Incorrect. There is no error in the code.',\r\n            'None': 'Incorrect. The code will print \"Greater\" since the condition is true.'\r\n        }\r\n    },\r\n    {\r\n        question: 'Which keyword is used to start a loop in Python?',\r\n        options: ['if', 'for', 'while', 'loop'],\r\n        answer: 'for',\r\n        explanation: {\r\n            'if': 'Incorrect. The if keyword is used to start a conditional statement.',\r\n            'for': 'Correct. The for keyword is used to start a for loop.',\r\n            'while': 'Incorrect. The while keyword is used to start a while loop.',\r\n            'loop': 'Incorrect. There is no loop keyword in Python.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What will the following code output?\\n\\ncount = 3\\nwhile count > 0:\\n    print(count)\\n    count -= 1',\r\n        options: ['3\\n2\\n1', '3\\n2\\n1\\n0', 'Error', 'None'],\r\n        answer: '3\\n2\\n1',\r\n        explanation: {\r\n            '3\\n2\\n1': 'Correct. The while loop will print 3, 2, and 1, and then stop when count is 0.',\r\n            '3\\n2\\n1\\n0': 'Incorrect. The loop stops before printing 0 since the condition becomes false.',\r\n            'Error': 'Incorrect. There is no error in the code.',\r\n            'None': 'Incorrect. The loop will print 3, 2, and 1.'\r\n        }\r\n    },\r\n];\r\n\r\nconst Lecture2Questionnaire: React.FC = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleSuccess = () => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['lecture2Questionnaire'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n        navigate('/week1/lecture3');\r\n    };\r\n\r\n    return <Questionnaire questions={questions} onSuccess={handleSuccess} />;\r\n};\r\n\r\nexport default Lecture2Questionnaire;\r\n"],"names":["_ref","questions","onSuccess","selectedAnswers","setSelectedAnswers","useState","showResults","setShowResults","isSuccessful","setIsSuccessful","_jsx","Container","maxWidth","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","map","q","index","FormControl","FormLabel","question","code","CopyBlock","text","language","theme","dracula","codeBlock","RadioGroup","name","concat","value","onChange","e","handleChange","questionIndex","option","target","options","i","FormControlLabel","control","Radio","label","_Fragment","answer","Alert","severity","explanation","Button","color","onClick","handleSubmit","allCorrect","every","style","marginTop","Lecture2Questionnaire","navigate","useNavigate","Questionnaire","handleSuccess","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify"],"sourceRoot":""}