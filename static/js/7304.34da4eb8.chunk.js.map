{"version":3,"file":"static/js/7304.34da4eb8.chunk.js","mappings":"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","sources":["components/weeks/week2/Lecture4.tsx"],"sourcesContent":["import { Typography, Box, Button, Paper, List, ListItem, Grid } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\nimport React, { useEffect } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport function Lecture4() {\r\n    useEffect(() => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['lecture4'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n    }, []);\r\n\r\n    return (\r\n        <Paper style={{ padding: 16 }}>\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture: Clean Code for Functions, File I/O, and Data Operations\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    In this lecture, we will focus on best practices for writing clean and maintainable code, specifically for functions, file input/output (I/O), and data operations. Clean code is not just about making your code work; it's about making it easy to read, understand, and maintain, especially for others who might read your code in the future, or even for yourself when you come back to it after some time.\r\n                </Typography>\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    Functions\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Functions are like mini-programs within your larger program. They help you organize your code into reusable blocks. Here are some tips for writing clean functions:\r\n                </Typography>\r\n                <List>\r\n                    {[\r\n                        { title: \"Descriptive Naming:\", description: \"Use clear and descriptive names for functions and parameters. The name of the function should convey what the function does, so others can understand it without having to read the entire code.\" },\r\n                        { title: \"Single Responsibility Principle:\", description: \"Each function should do one thing and do it well. Avoid writing functions that try to handle multiple tasks. This makes your code easier to test and debug.\" },\r\n                        { title: \"Function Length:\", description: \"Keep your functions short and focused. If a function gets too long, it probably means it is trying to do too much. Break it into smaller functions with specific tasks.\" },\r\n                        { title: \"Avoiding Side Effects:\", description: \"A function should not change any state outside its own scope (no modifications to global variables or objects). This makes functions more predictable and easier to debug.\" },\r\n                        { title: \"Docstrings and Comments:\", description: \"Use docstrings to describe what a function does, its parameters, and its return values. Use comments to explain complex parts of your code, but don't overdo it â€“ the code itself should be as clear as possible.\" }\r\n                    ].map((item, index) => (\r\n                        <ListItem key={index}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={4}>\r\n                                    <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Typography component=\"span\">\r\n                                        {item.description}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    File I/O\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    File I/O means reading from or writing to files. It's a common task in programming for things like saving data, reading configurations, or logging information. Here are some best practices for handling file I/O:\r\n                </Typography>\r\n                <List>\r\n                    {[\r\n                        { title: \"Using Context Managers:\", description: \"Always use context managers (with statements) to handle file operations. This ensures that files are properly closed after operations, even if an error occurs. This prevents file corruption and other unexpected issues.\" },\r\n                        { title: \"Error Handling:\", description: \"Implement proper error handling to manage scenarios like missing files or permission issues. Use try-except blocks to handle these errors gracefully.\" },\r\n                        { title: \"File Paths:\", description: \"Use absolute paths or well-defined relative paths to avoid issues related to file location. Libraries like os or pathlib can help manage paths more effectively.\" }\r\n                    ].map((item, index) => (\r\n                        <ListItem key={index}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={4}>\r\n                                    <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Typography component=\"span\">\r\n                                        {item.description}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    Data Operations\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Data operations include tasks like transforming, filtering, and validating data. Clean code practices for data operations ensure your code is efficient and easy to understand. Here are some tips:\r\n                </Typography>\r\n                <List>\r\n                    {[\r\n                        { title: \"List Comprehensions:\", description: \"Use list comprehensions for simple data transformations and filtering. They are a concise and readable way to create new lists from existing lists.\" },\r\n                        { title: \"Lambda Functions:\", description: \"Use lambda functions for small, anonymous functions that are not reused elsewhere. They are particularly useful for operations like sorting, filtering, or mapping.\" },\r\n                        { title: \"Code Readability:\", description: \"Write code that is easy to read and understand. Avoid overly complex or 'clever' solutions that are difficult to follow. Prioritize clarity over brevity.\" },\r\n                        { title: \"Data Validation:\", description: \"Always validate data before processing it. Check for expected types, ranges, and formats to prevent errors and ensure data integrity.\" },\r\n                        { title: \"Consistent Formatting:\", description: \"Follow consistent code formatting and style guidelines, such as PEP 8 for Python. Use tools like linters and formatters to maintain consistency across your codebase.\" }\r\n                    ].map((item, index) => (\r\n                        <ListItem key={index}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={4}>\r\n                                    <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Typography component=\"span\">\r\n                                        {item.description}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    By following these best practices, you can write code that is not only functional but also clean and maintainable. Clean code practices enhance collaboration, simplify debugging, and make it easier to extend and maintain code in the long run. Focus on clear function definitions, robust file I/O handling, and efficient data operations to write Python code that is both effective and elegant.\r\n                </Typography>\r\n                <Box mt={4}>\r\n                    <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/week2/lecture4/questionnaire\">\r\n                        Take the Questionnaire\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Lecture4;\r\n"],"names":["Lecture4","useEffect","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify","_jsx","Paper","style","padding","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","paragraph","List","title","description","map","item","index","ListItem","Grid","container","spacing","xs","fontWeight","mt","Button","color","RouterLink","to"],"sourceRoot":""}