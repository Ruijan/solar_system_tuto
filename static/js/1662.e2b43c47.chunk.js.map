{"version":3,"file":"static/js/1662.e2b43c47.chunk.js","mappings":"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","sources":["components/weeks/week1/assignment/Exercise1.tsx","../node_modules/@mui/icons-material/Lightbulb.js"],"sourcesContent":["// src/components/weeks/week1/Exercise1.tsx\r\nimport React from 'react';\r\nimport { Typography, Box, List, ListItem, ListItemText, Collapse, Button } from '@mui/material';\r\nimport LightbulbIcon from '@mui/icons-material/Lightbulb';\r\n\r\n\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\n\r\nconst Exercise1: React.FC = () => {\r\n    const [showTip1, setShowTip1] = React.useState(false);\r\n    const [showTip2, setShowTip2] = React.useState(false);\r\n\r\n    return (\r\n        <Box my={4}>\r\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n                Exercise 1: Understanding the Random Module\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                In this exercise, you will learn about the `random` module in Python and use it to create a function that generates random planet names.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                The `random` module is a built-in module in Python that allows you to generate random numbers. You can use it to create random values for different types of data.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Here are some useful functions from the `random` module:\r\n            </Typography>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary=\"1. `random.random()` - Returns a random float between 0.0 and 1.0.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"2. `random.randint(a, b)` - Returns a random integer between `a` and `b` (inclusive).\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"3. `random.choice(seq)` - Returns a random element from the non-empty sequence `seq`.\" />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary=\"4. `random.uniform(a, b)` - Returns a random float between `a` and `b`.\" />\r\n                </ListItem>\r\n            </List>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Let's see an example of how to use the `random` module to generate a random planet name:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`import random\r\n\r\ndef generate_planet_name():\r\n    names = [\"jupiter\", \"mars\", \"venus\", \"earth\", \"saturn\", \"neptune\", \"uranus\", \"pluto\"]\r\n    return random.choice(names)\r\n\r\n# Example usage\r\nprint(generate_planet_name())`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"body1\" paragraph>\r\n                Your task is to create a function called `generate_planet_name` that uses the `random` module to generate random planet names. This function should return a string.\r\n                It should be able to generate more than <strong>1000 unique planet names</strong>. It should always start with a capital letter and have a length between 5 and 10 characters.\r\n                Obvious names like \"Earth\" or \"Mars\" should not be generated and you should not create an array of all possible planet names.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Ensure you return the generated name at the end of your function.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Once you have implemented the function, you can run the unit tests to verify its correctness. Open a terminal in your project's root directory and run the following command:\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`python -m unittest discover -s tests -p 'test_main.py' -k test_generate_planet_name`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Template Code\r\n            </Typography>\r\n            <CopyBlock\r\n                text={`import random\r\n\r\ndef generate_planet_name():\r\n    # Use random to generate a random planet name\r\n    pass`}\r\n                language=\"python\"\r\n                theme={dracula}\r\n                codeBlock\r\n            />\r\n            <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                Tips\r\n            </Typography>\r\n\r\n            <Button onClick={() => setShowTip1(!showTip1)} startIcon={<LightbulbIcon />}>\r\n                {showTip1 ? 'Hide Tip 1' : 'Show Tip 1'}\r\n            </Button>\r\n            <Collapse in={showTip1}>\r\n                <Box p={2} bgcolor=\"#d5f5e3\" borderRadius={4}>\r\n                    <Typography variant=\"body1\" paragraph display=\"flex\" alignItems=\"center\">\r\n                        <LightbulbIcon style={{ marginRight: 8 }} /> Tip 1: Think about how words are usually composed. For example, you can create a prefix and a suffix list and combine them to form names.\r\n                    </Typography>\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button onClick={() => setShowTip2(!showTip2)} startIcon={<LightbulbIcon />}>\r\n                {showTip2 ? 'Hide Tip 2' : 'Show Tip 2'}\r\n            </Button>\r\n            <Collapse in={showTip2}>\r\n                <Box p={2} bgcolor=\"#d5f5e3\" borderRadius={4}>\r\n                    <Typography variant=\"body1\" paragraph display=\"flex\" alignItems=\"center\">\r\n                        <LightbulbIcon style={{ marginRight: 8 }} /> Tip 2: You can use `random.choice` multiple times to pick different parts of the name.\r\n                    </Typography>\r\n                </Box>\r\n            </Collapse>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Exercise1;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 21c0 .5.4 1 1 1h4c.6 0 1-.5 1-1v-1H9zm3-19C8.1 2 5 5.1 5 9c0 2.4 1.2 4.5 3 5.7V17c0 .5.4 1 1 1h6c.6 0 1-.5 1-1v-2.3c1.8-1.3 3-3.4 3-5.7 0-3.9-3.1-7-7-7\"\n}), 'Lightbulb');"],"names":["Exercise1","showTip1","setShowTip1","React","showTip2","setShowTip2","_jsxs","Box","my","children","_jsx","Typography","variant","component","gutterBottom","paragraph","List","ListItem","ListItemText","primary","CopyBlock","text","language","theme","dracula","codeBlock","Button","onClick","startIcon","LightbulbIcon","Collapse","in","p","bgcolor","borderRadius","display","alignItems","style","marginRight","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}