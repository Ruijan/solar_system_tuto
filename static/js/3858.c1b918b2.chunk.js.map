{"version":3,"file":"static/js/3858.c1b918b2.chunk.js","mappings":"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","sources":["components/Questionnaire.tsx","components/weeks/week2/Lecture1Questionnaire.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Typography, Box, Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Alert } from '@mui/material';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\nexport interface Question {\r\n    question: string;\r\n    options: string[];\r\n    answer: string;\r\n    explanation: { [option: string]: string };\r\n    code?: string; // Optional code attribute\r\n}\r\n\r\ninterface QuestionnaireProps {\r\n    questions: Question[];\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ questions, onSuccess }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [isSuccessful, setIsSuccessful] = useState(false);\r\n\r\n    const handleChange = (questionIndex: number, option: string) => {\r\n        setSelectedAnswers({ ...selectedAnswers, [questionIndex]: option });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        setShowResults(true);\r\n        const allCorrect = questions.every((q, index) => selectedAnswers[index] === q.answer);\r\n        setIsSuccessful(allCorrect);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture Questionnaire\r\n                </Typography>\r\n                {questions.map((q, index) => (\r\n                    <Box key={index} my={2}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">{q.question}</FormLabel>\r\n                            {q.code && (\r\n                                <CopyBlock\r\n                                    text={q.code}\r\n                                    language=\"python\"\r\n                                    theme={dracula}\r\n                                    codeBlock\r\n                                />\r\n                            )}\r\n                            <RadioGroup\r\n                                name={`question-${index}`}\r\n                                value={selectedAnswers[index] || ''}\r\n                                onChange={(e) => handleChange(index, e.target.value)}\r\n                            >\r\n                                {q.options.map((option, i) => (\r\n                                    <FormControlLabel key={i} value={option} control={<Radio />} label={option} />\r\n                                ))}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {showResults && (\r\n                            <>\r\n                                {selectedAnswers[index] === q.answer ? (\r\n                                    <Alert severity=\"success\">Correct</Alert>\r\n                                ) : (\r\n                                    <Alert severity=\"error\">{q.explanation[selectedAnswers[index]]}</Alert>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                ))}\r\n                {!isSuccessful &&<Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>}\r\n                {showResults && isSuccessful && (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onSuccess} style={{ marginTop: '16px' }}>\r\n                        Continue\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Questionnaire, {Question} from '../../Questionnaire';\r\n\r\nconst questions: Question[] = [\r\n    {\r\n        question: 'What is the purpose of a function in Python?',\r\n        options: [\r\n            'To define a variable',\r\n            'To perform a specific task and can be reused',\r\n            'To loop through a sequence of items',\r\n            'To handle exceptions'\r\n        ],\r\n        answer: 'To perform a specific task and can be reused',\r\n        explanation: {\r\n            'To define a variable': 'Incorrect. Functions do more than define variables; they perform tasks.',\r\n            'To perform a specific task and can be reused': 'Correct. Functions are meant to perform specific tasks and be reusable.',\r\n            'To loop through a sequence of items': 'Incorrect. Loops, not functions, are used to iterate through sequences.',\r\n            'To handle exceptions': 'Incorrect. Exception handling is done using try-except blocks.'\r\n        }\r\n    },\r\n    {\r\n        question: 'How do you define a function in Python?',\r\n        options: [\r\n            'function myFunction():',\r\n            'def myFunction():',\r\n            'create myFunction():',\r\n            'function myFunction:'\r\n        ],\r\n        answer: 'def myFunction():',\r\n        explanation: {\r\n            'function myFunction():': 'Incorrect. This syntax is not valid in Python.',\r\n            'def myFunction():': 'Correct. The def keyword is used to define a function in Python.',\r\n            'create myFunction():': 'Incorrect. This is not the correct syntax in Python.',\r\n            'function myFunction:': 'Incorrect. This is not valid Python syntax.'\r\n        }\r\n    },\r\n    {\r\n        question: 'Which keyword is used to return a value from a function?',\r\n        options: [\r\n            'give',\r\n            'send',\r\n            'return',\r\n            'yield'\r\n        ],\r\n        answer: 'return',\r\n        explanation: {\r\n            'give': 'Incorrect. The correct keyword is return.',\r\n            'send': 'Incorrect. The correct keyword is return.',\r\n            'return': 'Correct. The return keyword is used to return a value from a function.',\r\n            'yield': 'Incorrect. The yield keyword is used in generators, not for returning values from regular functions.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What will the following code output?\\n\\ndef my_function():\\n    return 10\\n\\nprint(my_function())',\r\n        options: [\r\n            'my_function',\r\n            '10',\r\n            'None',\r\n            'Error'\r\n        ],\r\n        answer: '10',\r\n        explanation: {\r\n            'my_function': 'Incorrect. The function call will execute and return 10.',\r\n            '10': 'Correct. The function returns 10, which is then printed.',\r\n            'None': 'Incorrect. The function returns 10, not None.',\r\n            'Error': 'Incorrect. There is no error in the code.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What is the output of the following code?\\n\\ndef add(a, b):\\n    return a + b\\n\\nresult = add(2, 3)\\nprint(result)',\r\n        options: [\r\n            '23',\r\n            '5',\r\n            'Error',\r\n            'None'\r\n        ],\r\n        answer: '5',\r\n        explanation: {\r\n            '23': 'Incorrect. The function adds the numbers, it does not concatenate them.',\r\n            '5': 'Correct. The function adds 2 and 3, resulting in 5.',\r\n            'Error': 'Incorrect. There is no error in the code.',\r\n            'None': 'Incorrect. The function returns 5, not None.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What does the following function do?\\n\\ndef greet(name):\\n    print(f\"Hello, {name}!\")',\r\n        options: [\r\n            'It prints a greeting message with the given name.',\r\n            'It returns a greeting message with the given name.',\r\n            'It stores the greeting message in a variable.',\r\n            'It does nothing.'\r\n        ],\r\n        answer: 'It prints a greeting message with the given name.',\r\n        explanation: {\r\n            'It prints a greeting message with the given name.': 'Correct. The function prints a greeting with the provided name.',\r\n            'It returns a greeting message with the given name.': 'Incorrect. The function prints the message; it does not return it.',\r\n            'It stores the greeting message in a variable.': 'Incorrect. The function prints the message; it does not store it.',\r\n            'It does nothing.': 'Incorrect. The function prints a greeting message.'\r\n        }\r\n    },\r\n    {\r\n        question: 'Which of the following is a correct way to call a function in Python?',\r\n        options: [\r\n            'my_function',\r\n            'my_function()',\r\n            'call my_function()',\r\n            'def my_function()'\r\n        ],\r\n        answer: 'my_function()',\r\n        explanation: {\r\n            'my_function': 'Incorrect. This references the function but does not call it.',\r\n            'my_function()': 'Correct. This calls the function.',\r\n            'call my_function()': 'Incorrect. This is not valid Python syntax for calling a function.',\r\n            'def my_function()': 'Incorrect. This is how you define a function, not call it.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What is a parameter in a function?',\r\n        options: [\r\n            'A value returned by the function',\r\n            'A variable defined outside the function',\r\n            'A value passed to the function when it is called',\r\n            'A loop inside the function'\r\n        ],\r\n        answer: 'A value passed to the function when it is called',\r\n        explanation: {\r\n            'A value returned by the function': 'Incorrect. This describes the return value, not a parameter.',\r\n            'A variable defined outside the function': 'Incorrect. Parameters are defined inside the function signature.',\r\n            'A value passed to the function when it is called': 'Correct. Parameters are the values passed to the function.',\r\n            'A loop inside the function': 'Incorrect. Parameters are not related to loops inside the function.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What is a local variable?',\r\n        options: [\r\n            'A variable that is defined outside any function',\r\n            'A variable that is defined inside a function',\r\n            'A variable that is accessible throughout the entire program',\r\n            'A variable that is defined in the global scope'\r\n        ],\r\n        answer: 'A variable that is defined inside a function',\r\n        explanation: {\r\n            'A variable that is defined outside any function': 'Incorrect. Variables defined outside any function are global variables.',\r\n            'A variable that is defined inside a function': 'Correct. Local variables are defined within a function.',\r\n            'A variable that is accessible throughout the entire program': 'Incorrect. Local variables are only accessible within the function they are defined in.',\r\n            'A variable that is defined in the global scope': 'Incorrect. Local variables are defined within functions, not in the global scope.'\r\n        }\r\n    },\r\n    {\r\n        question: 'What does the following function return?\\n\\ndef square(x):\\n    return x * x\\n\\nresult = square(4)\\nprint(result)',\r\n        options: [\r\n            '8',\r\n            '16',\r\n            'Error',\r\n            'None'\r\n        ],\r\n        answer: '16',\r\n        explanation: {\r\n            '8': 'Incorrect. The function squares the number, it does not double it.',\r\n            '16': 'Correct. 4 squared is 16.',\r\n            'Error': 'Incorrect. There is no error in the code.',\r\n            'None': 'Incorrect. The function returns 16, not None.'\r\n        }\r\n    }\r\n];\r\n\r\nconst Lecture1Questionnaire: React.FC = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleSuccess = () => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['week2lecture1Questionnaire'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n        navigate('/week2/lecture2');\r\n    };\r\n\r\n    return <Questionnaire questions={questions} onSuccess={handleSuccess} />;\r\n};\r\n\r\nexport default Lecture1Questionnaire;\r\n"],"names":["_ref","questions","onSuccess","selectedAnswers","setSelectedAnswers","useState","showResults","setShowResults","isSuccessful","setIsSuccessful","_jsx","Container","maxWidth","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","map","q","index","FormControl","FormLabel","question","code","CopyBlock","text","language","theme","dracula","codeBlock","RadioGroup","name","concat","value","onChange","e","handleChange","questionIndex","option","target","options","i","FormControlLabel","control","Radio","label","_Fragment","answer","Alert","severity","explanation","Button","color","onClick","handleSubmit","allCorrect","every","style","marginTop","Lecture1Questionnaire","navigate","useNavigate","Questionnaire","handleSuccess","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify"],"sourceRoot":""}