{"version":3,"file":"static/js/7453.4368660e.chunk.js","mappings":"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","sources":["components/Questionnaire.tsx","components/weeks/week2/Lecture4Questionnaire.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Typography, Box, Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Alert } from '@mui/material';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\nexport interface Question {\r\n    question: string;\r\n    options: string[];\r\n    answer: string;\r\n    explanation: { [option: string]: string };\r\n    code?: string; // Optional code attribute\r\n}\r\n\r\ninterface QuestionnaireProps {\r\n    questions: Question[];\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ questions, onSuccess }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [isSuccessful, setIsSuccessful] = useState(false);\r\n\r\n    const handleChange = (questionIndex: number, option: string) => {\r\n        setSelectedAnswers({ ...selectedAnswers, [questionIndex]: option });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        setShowResults(true);\r\n        const allCorrect = questions.every((q, index) => selectedAnswers[index] === q.answer);\r\n        setIsSuccessful(allCorrect);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture Questionnaire\r\n                </Typography>\r\n                {questions.map((q, index) => (\r\n                    <Box key={index} my={2}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">{q.question}</FormLabel>\r\n                            {q.code && (\r\n                                <CopyBlock\r\n                                    text={q.code}\r\n                                    language=\"python\"\r\n                                    theme={dracula}\r\n                                    codeBlock\r\n                                />\r\n                            )}\r\n                            <RadioGroup\r\n                                name={`question-${index}`}\r\n                                value={selectedAnswers[index] || ''}\r\n                                onChange={(e) => handleChange(index, e.target.value)}\r\n                            >\r\n                                {q.options.map((option, i) => (\r\n                                    <FormControlLabel key={i} value={option} control={<Radio />} label={option} />\r\n                                ))}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {showResults && (\r\n                            <>\r\n                                {selectedAnswers[index] === q.answer ? (\r\n                                    <Alert severity=\"success\">Correct</Alert>\r\n                                ) : (\r\n                                    <Alert severity=\"error\">{q.explanation[selectedAnswers[index]]}</Alert>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                ))}\r\n                {!isSuccessful &&<Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>}\r\n                {showResults && isSuccessful && (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onSuccess} style={{ marginTop: '16px' }}>\r\n                        Continue\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from 'react';\r\nimport Questionnaire, {Question} from '../../Questionnaire';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst questions: Question[] = [\r\n    {\r\n        question: \"1. What is wrong with the following function name?\",\r\n        code: `def func(x, y):\r\n    return x + y`,\r\n        options: [\r\n            \"The name 'func' is not descriptive.\",\r\n            \"The function has too many parameters.\",\r\n            \"The function should not use return.\",\r\n            \"There is nothing wrong with the name.\"\r\n        ],\r\n        answer: \"The name 'func' is not descriptive.\",\r\n        explanation: {\r\n            \"The name 'func' is not descriptive.\": \"Correct. Function names should be descriptive to indicate their purpose.\",\r\n            \"The function has too many parameters.\": \"Incorrect. The function has an acceptable number of parameters.\",\r\n            \"The function should not use return.\": \"Incorrect. Using return is necessary for this function.\",\r\n            \"There is nothing wrong with the name.\": \"Incorrect. The name 'func' is too generic and not descriptive.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"2. Identify the issue with the following function based on the single responsibility principle.\",\r\n        code: `def process_and_save_data(data):\r\n    # Process data\r\n    processed_data = [d*2 for d in data]\r\n    \r\n    # Save data to file\r\n    with open('data.txt', 'w') as f:\r\n        f.write(str(processed_data))`,\r\n        options: [\r\n            \"The function name is not descriptive.\",\r\n            \"The function has too many parameters.\",\r\n            \"The function is doing more than one task.\",\r\n            \"The function should not use list comprehensions.\"\r\n        ],\r\n        answer: \"The function is doing more than one task.\",\r\n        explanation: {\r\n            \"The function name is not descriptive.\": \"Incorrect. The function name is reasonably descriptive.\",\r\n            \"The function has too many parameters.\": \"Incorrect. The function has only one parameter.\",\r\n            \"The function is doing more than one task.\": \"Correct. The function should be split into two: one for processing data and one for saving data.\",\r\n            \"The function should not use list comprehensions.\": \"Incorrect. Using list comprehensions is not an issue here.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"3. What is the problem with this function length?\",\r\n        code: `def long_function():\r\n    for i in range(10):\r\n        print(i)\r\n    for j in range(20):\r\n        print(j)\r\n    for k in range(30):\r\n        print(k)\r\n    # Many more lines of code`,\r\n        options: [\r\n            \"The function should be broken into smaller functions.\",\r\n            \"The function name is not descriptive.\",\r\n            \"The function has too many parameters.\",\r\n            \"The function should not use for loops.\"\r\n        ],\r\n        answer: \"The function should be broken into smaller functions.\",\r\n        explanation: {\r\n            \"The function should be broken into smaller functions.\": \"Correct. Long functions should be divided into smaller, more focused functions.\",\r\n            \"The function name is not descriptive.\": \"Incorrect. While the name could be improved, the main issue is the function length.\",\r\n            \"The function has too many parameters.\": \"Incorrect. The function has no parameters.\",\r\n            \"The function should not use for loops.\": \"Incorrect. Using for loops is not the issue here.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"4. What side effect does this function have?\",\r\n        code: `def add_to_list(item, lst=[]):\r\n    lst.append(item)\r\n    return lst`,\r\n        options: [\r\n            \"It modifies the global state.\",\r\n            \"It has no side effects.\",\r\n            \"It uses a mutable default argument.\",\r\n            \"It does not return a value.\"\r\n        ],\r\n        answer: \"It uses a mutable default argument.\",\r\n        explanation: {\r\n            \"It modifies the global state.\": \"Incorrect. The function does not directly modify the global state.\",\r\n            \"It has no side effects.\": \"Incorrect. The function has a side effect due to the mutable default argument.\",\r\n            \"It uses a mutable default argument.\": \"Correct. Using mutable default arguments can lead to unexpected behavior.\",\r\n            \"It does not return a value.\": \"Incorrect. The function does return a value.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"5. What is wrong with the following file handling code?\",\r\n        code: `def read_file(file_path):\r\n    f = open(file_path, 'r')\r\n    data = f.read()\r\n    f.close()\r\n    return data`,\r\n        options: [\r\n            \"The file is not properly closed if an error occurs.\",\r\n            \"The file should be opened in write mode.\",\r\n            \"The file should not be opened using open().\",\r\n            \"The function should not return data.\"\r\n        ],\r\n        answer: \"The file is not properly closed if an error occurs.\",\r\n        explanation: {\r\n            \"The file is not properly closed if an error occurs.\": \"Correct. Using a context manager (with statement) ensures the file is closed properly.\",\r\n            \"The file should be opened in write mode.\": \"Incorrect. The file needs to be opened in read mode.\",\r\n            \"The file should not be opened using open().\": \"Incorrect. Using open() is correct, but it should be used within a context manager.\",\r\n            \"The function should not return data.\": \"Incorrect. Returning data from the file is the intended behavior.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"6. What is the purpose of the following context manager?\",\r\n        code: `with open('data.txt', 'r') as f:\r\n    data = f.read()\r\nprint(data)`,\r\n        options: [\r\n            \"To ensure the file is automatically closed after reading.\",\r\n            \"To open the file in write mode.\",\r\n            \"To prevent the file from being read.\",\r\n            \"To print the file content.\"\r\n        ],\r\n        answer: \"To ensure the file is automatically closed after reading.\",\r\n        explanation: {\r\n            \"To ensure the file is automatically closed after reading.\": \"Correct. The with statement ensures the file is properly closed after its block of code is executed.\",\r\n            \"To open the file in write mode.\": \"Incorrect. The file is opened in read mode.\",\r\n            \"To prevent the file from being read.\": \"Incorrect. The file is being read.\",\r\n            \"To print the file content.\": \"Incorrect. Printing the file content is not the purpose of the context manager.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"7. Identify the error in the following code snippet:\",\r\n        code: `from os import path\r\n\r\ndef check_file_exists(file_name):\r\n    return path.exists(file_name)\r\nprint(check_file_exists('data.txt'))`,\r\n        options: [\r\n            \"The function should use an absolute path.\",\r\n            \"The import statement is incorrect.\",\r\n            \"There is no error.\",\r\n            \"The function should handle exceptions.\"\r\n        ],\r\n        answer: \"There is no error.\",\r\n        explanation: {\r\n            \"The function should use an absolute path.\": \"Incorrect. While using an absolute path can be helpful, it is not necessary.\",\r\n            \"The import statement is incorrect.\": \"Incorrect. The import statement is correct.\",\r\n            \"There is no error.\": \"Correct. The code snippet is correct and functional.\",\r\n            \"The function should handle exceptions.\": \"Incorrect. Exception handling is not required in this context.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"8. What does the following list comprehension do?\",\r\n        code: `numbers = [1, 2, 3, 4, 5]\r\nsquared = [x**2 for x in numbers]\r\nprint(squared)`,\r\n        options: [\r\n            \"Squares each number in the list.\",\r\n            \"Cubes each number in the list.\",\r\n            \"Filters out even numbers.\",\r\n            \"Adds 2 to each number in the list.\"\r\n        ],\r\n        answer: \"Squares each number in the list.\",\r\n        explanation: {\r\n            \"Squares each number in the list.\": \"Correct. The list comprehension squares each number in the list.\",\r\n            \"Cubes each number in the list.\": \"Incorrect. The list comprehension squares, not cubes, the numbers.\",\r\n            \"Filters out even numbers.\": \"Incorrect. The list comprehension does not filter any numbers.\",\r\n            \"Adds 2 to each number in the list.\": \"Incorrect. The list comprehension squares the numbers, it does not add 2.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"9. What is the purpose of using a lambda function in this code?\",\r\n        code: `numbers = [1, 2, 3, 4]\r\ndoubled = list(map(lambda x: x * 2, numbers))\r\nprint(doubled)`,\r\n        options: [\r\n            \"To define a small, anonymous function for doubling numbers.\",\r\n            \"To sort the numbers in the list.\",\r\n            \"To filter out odd numbers.\",\r\n            \"To add all numbers together.\"\r\n        ],\r\n        answer: \"To define a small, anonymous function for doubling numbers.\",\r\n        explanation: {\r\n            \"To define a small, anonymous function for doubling numbers.\": \"Correct. The lambda function is used to double each number in the list.\",\r\n            \"To sort the numbers in the list.\": \"Incorrect. The lambda function is not used for sorting.\",\r\n            \"To filter out odd numbers.\": \"Incorrect. The lambda function does not filter any numbers.\",\r\n            \"To add all numbers together.\": \"Incorrect. The lambda function is used to double the numbers, not add them together.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"10. What is the issue with the following data validation code?\",\r\n        code: `def validate_age(age):\r\n    assert age > 0, \"Age must be positive\"\r\n    return True\r\nprint(validate_age(-5))`,\r\n        options: [\r\n            \"Using assert for data validation is not recommended.\",\r\n            \"The function should return False for invalid data.\",\r\n            \"The print statement is incorrect.\",\r\n            \"There is no issue with the code.\"\r\n        ],\r\n        answer: \"Using assert for data validation is not recommended.\",\r\n        explanation: {\r\n            \"Using assert for data validation is not recommended.\": \"Correct. Asserts can be disabled in production code; explicit checks are preferred.\",\r\n            \"The function should return False for invalid data.\": \"Incorrect. The function should handle invalid data appropriately, but the main issue is the use of assert.\",\r\n            \"The print statement is incorrect.\": \"Incorrect. The print statement is fine for testing purposes.\",\r\n            \"There is no issue with the code.\": \"Incorrect. Using assert for data validation is not recommended.\"\r\n        }\r\n    }\r\n];\r\n\r\nconst Lecture4Questionnaire = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleSuccess = () => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['week2lecture4Questionnaire'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n        navigate('/week2');\r\n    };\r\n\r\n\r\n    return <Questionnaire questions={questions} onSuccess={handleSuccess} />;\r\n};\r\n\r\nexport default Lecture4Questionnaire;\r\n"],"names":["_ref","questions","onSuccess","selectedAnswers","setSelectedAnswers","useState","showResults","setShowResults","isSuccessful","setIsSuccessful","_jsx","Container","maxWidth","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","map","q","index","FormControl","FormLabel","question","code","CopyBlock","text","language","theme","dracula","codeBlock","RadioGroup","name","concat","value","onChange","e","handleChange","questionIndex","option","target","options","i","FormControlLabel","control","Radio","label","_Fragment","answer","Alert","severity","explanation","Button","color","onClick","handleSubmit","allCorrect","every","style","marginTop","Lecture4Questionnaire","navigate","useNavigate","Questionnaire","handleSuccess","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify"],"sourceRoot":""}