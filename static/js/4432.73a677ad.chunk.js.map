{"version":3,"file":"static/js/4432.73a677ad.chunk.js","mappings":"kQAiBA,MAmEA,EAnEoDA,IAA+B,IAA9B,UAAEC,EAAS,UAAEC,GAAWF,EACzE,MAAOG,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAoC,CAAC,IAC5EC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,WAAS,GAYjD,OACIK,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,SAAS,KAAIC,UACpBC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,EAAEH,SAAA,EACPH,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAP,SAAC,0BAGpDZ,EAAUoB,KAAI,CAACC,EAAGC,KACfT,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAaC,GAAI,EAAEH,SAAA,EACnBC,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAACL,UAAU,WAAUN,SAAA,EAC7BH,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAACN,UAAU,SAAQN,SAAES,EAAEI,WAChCJ,EAAEK,OACCjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAS,CACNC,KAAMP,EAAEK,KACRG,SAAS,SACTC,MAAOC,EAAAA,GACPC,WAAS,KAGjBvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAU,CACPC,KAAI,YAAAC,OAAcb,GAClBc,MAAOlC,EAAgBoB,IAAU,GACjCe,SAAWC,IAAMC,OA/BvBC,EA+BoClB,EA/BbmB,EA+BoBH,EAAEI,OAAON,WA9BtEjC,EAAmB,IAAKD,EAAiB,CAACsC,GAAgBC,IADzCF,IAACC,EAAuBC,CA+BoC,EAAA7B,SAEpDS,EAAEsB,QAAQvB,KAAI,CAACqB,EAAQG,KACpBnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAgB,CAAST,MAAOK,EAAQK,SAASrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAK,IAAKC,MAAOP,GAA7CG,UAIlCvC,IACGI,EAAAA,EAAAA,KAAAwC,EAAAA,SAAA,CAAArC,SACKV,EAAgBoB,KAAWD,EAAE6B,QAC1BzC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAK,CAACC,SAAS,UAASxC,SAAC,aAE1BH,EAAAA,EAAAA,KAAC0C,EAAAA,EAAK,CAACC,SAAS,QAAOxC,SAAES,EAAEgC,YAAYnD,EAAgBoB,UA1B7DA,MAgCZf,IAAeE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CAACrC,QAAQ,YAAYsC,MAAM,UAAUC,QA7CpDC,KACjBnD,GAAe,GACf,MAAMoD,EAAa1D,EAAU2D,OAAM,CAACtC,EAAGC,IAAUpB,EAAgBoB,KAAWD,EAAE6B,SAC9E1C,EAAgBkD,EAAW,EA0CgE9C,SAAC,WAGnFP,GAAeE,IACZE,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CAACrC,QAAQ,YAAYsC,MAAM,YAAYC,QAASvD,EAAW2D,MAAO,CAAEC,UAAW,QAASjD,SAAC,iBAKhG,C,wFC5EpB,MAAMZ,EAAwB,CAC1B,CACIyB,SAAU,6DACVC,KAAK,4EAGLiB,QAAS,CAAC,gBAAiB,iBAAkB,eAAgB,gBAC7DO,OAAQ,gBACRG,YAAa,CACT,gBAAiB,mEACjB,iBAAkB,iDAClB,eAAgB,oDAChB,eAAgB,+CAGxB,CACI5B,SAAU,uGACVkB,QAAS,CAAC,kBAAmB,mBAAoB,kBAAmB,sBACpEO,OAAQ,kBACRG,YAAa,CACT,kBAAmB,2DACnB,mBAAoB,mDACpB,kBAAmB,uDACnB,qBAAsB,oEAG9B,CACI5B,SAAU,oDACVC,KAAK,kGAGLiB,QAAS,CAAC,SAAU,SAAU,eAAgB,MAC9CO,OAAQ,SACRG,YAAa,CACT,SAAU,wCACV,SAAU,4DACV,eAAgB,6DAChB,KAAM,sCAGd,CACI5B,SAAU,+CACVC,KAAK,gFAGLiB,QAAS,CAAC,+CAAgD,2CAA4C,oBAAqB,mCAC3HO,OAAQ,+CACRG,YAAa,CACT,+CAAgD,0EAChD,2CAA4C,oDAC5C,oBAAqB,+DACrB,kCAAmC,kDAG3C,CACI5B,SAAU,oDACVC,KAAK,mFAGLiB,QAAS,CAAC,wCAAyC,+BAAgC,sBAAuB,uBAC1GO,OAAQ,+BACRG,YAAa,CACT,wCAAyC,6DACzC,+BAAgC,sFAChC,sBAAuB,+EACvB,sBAAuB,iFAG/B,CACI5B,SAAU,iHACVkB,QAAS,CAAC,WAAY,WAAY,QAAS,YAC3CO,OAAQ,QACRG,YAAa,CACT,WAAY,8EACZ,WAAY,+EACZ,QAAS,mFACT,WAAY,yDAGpB,CACI5B,SAAU,oDACVC,KAAK,gHAILiB,QAAS,CAAC,qBAAsB,qBAAsB,qBAAsB,wCAC5EO,OAAQ,qBACRG,YAAa,CACT,qBAAsB,6DACtB,qBAAsB,wCACtB,qBAAsB,+FACtB,uCAAwC,6DAGhD,CACI5B,SAAU,qDACVC,KAAK,kDAELiB,QAAS,CAAC,mBAAoB,6CAA8C,kCAAmC,oCAC/GO,OAAQ,6CACRG,YAAa,CACT,mBAAoB,6FACpB,6CAA8C,kEAC9C,kCAAmC,yCACnC,mCAAoC,mFAG5C,CACI5B,SAAU,oDACVC,KAAK,4FAGLiB,QAAS,CAAC,YAAa,SAAU,kBAAmB,MACpDO,OAAQ,SACRG,YAAa,CACT,YAAa,wCACb,SAAU,qEACV,kBAAmB,wCACnB,KAAM,mEAGd,CACI5B,SAAU,uCACVC,KAAK,oHAILiB,QAAS,CAAC,4BAA6B,kCAAmC,wBAAyB,uBACnGO,OAAQ,kCACRG,YAAa,CACT,4BAA6B,wEAC7B,kCAAmC,8EACnC,wBAAyB,6EACzB,sBAAuB,8EAkBnC,EAb8BS,KAC1B,MAAMC,GAAWC,EAAAA,EAAAA,MASjB,OAAOvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAa,CAACjE,UAAWA,EAAWC,UAPtBiE,KAClB,MAAMC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,qBAAuB,MAChFJ,EAA6C,4BAAI,EACjDG,aAAaE,QAAQ,mBAAoBJ,KAAKK,UAAUN,IACxDJ,EAAS,kBAAkB,GAGyC,C","sources":["components/Questionnaire.tsx","components/weeks/week2/Lecture3Questionnaire.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Typography, Box, Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Alert } from '@mui/material';\r\nimport {CopyBlock, dracula} from \"react-code-blocks\";\r\n\r\nexport interface Question {\r\n    question: string;\r\n    options: string[];\r\n    answer: string;\r\n    explanation: { [option: string]: string };\r\n    code?: string; // Optional code attribute\r\n}\r\n\r\ninterface QuestionnaireProps {\r\n    questions: Question[];\r\n    onSuccess: () => void;\r\n}\r\n\r\nconst Questionnaire: React.FC<QuestionnaireProps> = ({ questions, onSuccess }) => {\r\n    const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: string }>({});\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [isSuccessful, setIsSuccessful] = useState(false);\r\n\r\n    const handleChange = (questionIndex: number, option: string) => {\r\n        setSelectedAnswers({ ...selectedAnswers, [questionIndex]: option });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        setShowResults(true);\r\n        const allCorrect = questions.every((q, index) => selectedAnswers[index] === q.answer);\r\n        setIsSuccessful(allCorrect);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture Questionnaire\r\n                </Typography>\r\n                {questions.map((q, index) => (\r\n                    <Box key={index} my={2}>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">{q.question}</FormLabel>\r\n                            {q.code && (\r\n                                <CopyBlock\r\n                                    text={q.code}\r\n                                    language=\"python\"\r\n                                    theme={dracula}\r\n                                    codeBlock\r\n                                />\r\n                            )}\r\n                            <RadioGroup\r\n                                name={`question-${index}`}\r\n                                value={selectedAnswers[index] || ''}\r\n                                onChange={(e) => handleChange(index, e.target.value)}\r\n                            >\r\n                                {q.options.map((option, i) => (\r\n                                    <FormControlLabel key={i} value={option} control={<Radio />} label={option} />\r\n                                ))}\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {showResults && (\r\n                            <>\r\n                                {selectedAnswers[index] === q.answer ? (\r\n                                    <Alert severity=\"success\">Correct</Alert>\r\n                                ) : (\r\n                                    <Alert severity=\"error\">{q.explanation[selectedAnswers[index]]}</Alert>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                ))}\r\n                {!isSuccessful &&<Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>}\r\n                {showResults && isSuccessful && (\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onSuccess} style={{ marginTop: '16px' }}>\r\n                        Continue\r\n                    </Button>\r\n                )}\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from 'react';\r\nimport Questionnaire, {Question} from '../../Questionnaire';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst questions: Question[] = [\r\n    {\r\n        question: \"1. What is the output of the following list comprehension?\",\r\n        code: `numbers = [1, 2, 3, 4]\r\nsquared = [x**2 for x in numbers]\r\nprint(squared)`,\r\n        options: [\"[1, 4, 9, 16]\", \"[1, 8, 27, 64]\", \"[2, 4, 6, 8]\", \"[1, 2, 3, 4]\"],\r\n        answer: \"[1, 4, 9, 16]\",\r\n        explanation: {\r\n            \"[1, 4, 9, 16]\": \"Correct. The list comprehension squares each number in the list.\",\r\n            \"[1, 8, 27, 64]\": \"Incorrect. These are the cubes of the numbers.\",\r\n            \"[2, 4, 6, 8]\": \"Incorrect. These are the numbers multiplied by 2.\",\r\n            \"[1, 2, 3, 4]\": \"Incorrect. These are the original numbers.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"2. Which of the following is the correct syntax for a lambda function that multiplies a number by 3?\",\r\n        options: [\"lambda x: x * 3\", \"lambda x: x ** 3\", \"lambda x: x + 3\", \"lambda x, y: x * y\"],\r\n        answer: \"lambda x: x * 3\",\r\n        explanation: {\r\n            \"lambda x: x * 3\": \"Correct. This lambda function multiplies its input by 3.\",\r\n            \"lambda x: x ** 3\": \"Incorrect. This lambda function cubes its input.\",\r\n            \"lambda x: x + 3\": \"Incorrect. This lambda function adds 3 to its input.\",\r\n            \"lambda x, y: x * y\": \"Incorrect. This lambda function multiplies two inputs together.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"3. What will be the output of the following code?\",\r\n        code: `numbers = [1, 2, 3, 4]\r\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))\r\nprint(filtered)`,\r\n        options: [\"[1, 3]\", \"[2, 4]\", \"[1, 2, 3, 4]\", \"[]\"],\r\n        answer: \"[2, 4]\",\r\n        explanation: {\r\n            \"[1, 3]\": \"Incorrect. These are the odd numbers.\",\r\n            \"[2, 4]\": \"Correct. The filter function keeps only the even numbers.\",\r\n            \"[1, 2, 3, 4]\": \"Incorrect. This would be the output without any filtering.\",\r\n            \"[]\": \"Incorrect. The list is not empty.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"4. Identify the error in the following code:\",\r\n        code: `numbers = [1, 2, 3, 4]\r\nresult = map(lambda x: x * 2, numbers)\r\nprint(result)`,\r\n        options: [\"The map function should be wrapped in list()\", \"Lambda functions cannot be used with map\", \"There is no error\", \"The print function is incorrect\"],\r\n        answer: \"The map function should be wrapped in list()\",\r\n        explanation: {\r\n            \"The map function should be wrapped in list()\": \"Correct. map() returns an iterator, so we need to convert it to a list.\",\r\n            \"Lambda functions cannot be used with map\": \"Incorrect. Lambda functions can be used with map.\",\r\n            \"There is no error\": \"Incorrect. There is an issue with how the result is printed.\",\r\n            \"The print function is incorrect\": \"Incorrect. The print function itself is fine.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"5. What does the following list comprehension do?\",\r\n        code: `numbers = [1, 2, 3, 4, 5]\r\nresult = [x for x in numbers if x > 2]\r\nprint(result)`,\r\n        options: [\"Keeps numbers less than or equal to 2\", \"Keeps numbers greater than 2\", \"Squares the numbers\", \"Doubles the numbers\"],\r\n        answer: \"Keeps numbers greater than 2\",\r\n        explanation: {\r\n            \"Keeps numbers less than or equal to 2\": \"Incorrect. The comprehension keeps numbers greater than 2.\",\r\n            \"Keeps numbers greater than 2\": \"Correct. The comprehension filters the list to include only numbers greater than 2.\",\r\n            \"Squares the numbers\": \"Incorrect. The comprehension does not modify the numbers, only filters them.\",\r\n            \"Doubles the numbers\": \"Incorrect. The comprehension does not modify the numbers, only filters them.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"6. Which higher-order function would you use to apply a function to each item in a list and return a new list?\",\r\n        options: [\"filter()\", \"reduce()\", \"map()\", \"sorted()\"],\r\n        answer: \"map()\",\r\n        explanation: {\r\n            \"filter()\": \"Incorrect. filter() is used to filter items in a list based on a condition.\",\r\n            \"reduce()\": \"Incorrect. reduce() is used to reduce the items of a list to a single value.\",\r\n            \"map()\": \"Correct. map() applies a function to each item in a list and returns a new list.\",\r\n            \"sorted()\": \"Incorrect. sorted() is used to sort items in a list.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"7. What will be the output of the following code?\",\r\n        code: `words = ['hello', 'world']\r\ncapitalized = list(map(lambda x: x.upper(), words))\r\nprint(capitalized)\r\n        `,\r\n        options: [\"['HELLO', 'WORLD']\", \"['hello', 'world']\", \"['Hello', 'World']\", \"['HELLO', 'WORLD', 'hello', 'world']\"],\r\n        answer: \"['HELLO', 'WORLD']\",\r\n        explanation: {\r\n            \"['HELLO', 'WORLD']\": \"Correct. The map function converts each word to uppercase.\",\r\n            \"['hello', 'world']\": \"Incorrect. This is the original list.\",\r\n            \"['Hello', 'World']\": \"Incorrect. The map function converts all characters to uppercase, not just the first letter.\",\r\n            \"['HELLO', 'WORLD', 'hello', 'world']\": \"Incorrect. The map function does not duplicate the list.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"8. Identify what is wrong with the following code:\",\r\n        code: `result = (lambda x, y: x + y)(2)\r\nprint(result)`,\r\n        options: [\"Nothing is wrong\", \"The lambda function requires two arguments\", \"The print function is incorrect\", \"The lambda function is incorrect\"],\r\n        answer: \"The lambda function requires two arguments\",\r\n        explanation: {\r\n            \"Nothing is wrong\": \"Incorrect. There is an issue with the number of arguments provided to the lambda function.\",\r\n            \"The lambda function requires two arguments\": \"Correct. The lambda function needs both x and y to be provided.\",\r\n            \"The print function is incorrect\": \"Incorrect. The print function is fine.\",\r\n            \"The lambda function is incorrect\": \"Incorrect. The lambda function syntax is correct, but it needs both arguments.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"9. What will be the output of the following code?\",\r\n        code: `numbers = [1, 2, 3, 4, 5]\r\nfiltered = [x for x in numbers if x % 2 == 0]\r\nprint(filtered)`,\r\n        options: [\"[1, 3, 5]\", \"[2, 4]\", \"[1, 2, 3, 4, 5]\", \"[]\"],\r\n        answer: \"[2, 4]\",\r\n        explanation: {\r\n            \"[1, 3, 5]\": \"Incorrect. These are the odd numbers.\",\r\n            \"[2, 4]\": \"Correct. The list comprehension filters to keep only even numbers.\",\r\n            \"[1, 2, 3, 4, 5]\": \"Incorrect. This is the original list.\",\r\n            \"[]\": \"Incorrect. The list is not empty, as it includes even numbers.\"\r\n        }\r\n    },\r\n    {\r\n        question: \"10. What does the following code do?\",\r\n        code: `from functools import reduce\r\nnumbers = [1, 2, 3, 4]\r\nresult = reduce(lambda x, y: x * y, numbers)\r\nprint(result)`,\r\n        options: [\"Adds all numbers together\", \"Multiplies all numbers together\", \"Subtracts all numbers\", \"Divides all numbers\"],\r\n        answer: \"Multiplies all numbers together\",\r\n        explanation: {\r\n            \"Adds all numbers together\": \"Incorrect. The lambda function multiplies the numbers, not adds them.\",\r\n            \"Multiplies all numbers together\": \"Correct. reduce with lambda x, y: x * y multiplies all numbers in the list.\",\r\n            \"Subtracts all numbers\": \"Incorrect. The lambda function multiplies the numbers, not subtracts them.\",\r\n            \"Divides all numbers\": \"Incorrect. The lambda function multiplies the numbers, not divides them.\"\r\n        }\r\n    }\r\n];\r\n\r\nconst Lecture3Questionnaire = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleSuccess = () => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['week2lecture3Questionnaire'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n        navigate('/week2/lecture4');\r\n    };\r\n\r\n    return <Questionnaire questions={questions} onSuccess={handleSuccess} />;\r\n};\r\n\r\nexport default Lecture3Questionnaire;\r\n"],"names":["_ref","questions","onSuccess","selectedAnswers","setSelectedAnswers","useState","showResults","setShowResults","isSuccessful","setIsSuccessful","_jsx","Container","maxWidth","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","map","q","index","FormControl","FormLabel","question","code","CopyBlock","text","language","theme","dracula","codeBlock","RadioGroup","name","concat","value","onChange","e","handleChange","questionIndex","option","target","options","i","FormControlLabel","control","Radio","label","_Fragment","answer","Alert","severity","explanation","Button","color","onClick","handleSubmit","allCorrect","every","style","marginTop","Lecture3Questionnaire","navigate","useNavigate","Questionnaire","handleSuccess","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify"],"sourceRoot":""}