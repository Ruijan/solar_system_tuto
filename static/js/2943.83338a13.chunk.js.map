{"version":3,"file":"static/js/2943.83338a13.chunk.js","mappings":"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","sources":["components/weeks/week2/Lecture3.tsx"],"sourcesContent":["import { Typography, Box, Button, Paper, List, ListItem } from '@mui/material';\r\nimport { CopyBlock, dracula } from 'react-code-blocks';\r\nimport React, { useEffect } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport function Lecture3() {\r\n    useEffect(() => {\r\n        const completionStatus = JSON.parse(localStorage.getItem('completionStatus') || '{}');\r\n        completionStatus['lecture3'] = true;\r\n        localStorage.setItem('completionStatus', JSON.stringify(completionStatus));\r\n    }, []);\r\n\r\n    return (\r\n        <Paper style={{ padding: 16 }}>\r\n            <Box my={4}>\r\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                    Lecture: Advanced Data Operations\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    In this lecture, we will learn about advanced data operations in Python, focusing on list comprehensions and lambda functions. These powerful tools enhance the efficiency and readability of your code, particularly when dealing with data processing tasks.\r\n                </Typography>\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    List Comprehensions\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    List comprehensions provide a concise way to create lists. This technique allows for the generation of new lists by applying an expression to each item in an existing list (or other iterable). The basic syntax is:\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`[expression for item in iterable if condition]`}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Key Points:\r\n                </Typography>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Simplified Syntax:\r\n                        </Typography>\r\n                        Makes code more readable and concise.\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Conditional Logic:\r\n                        </Typography>\r\n                        Can include optional conditions to filter items.\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Performance:\r\n                        </Typography>\r\n                        Often more efficient than traditional for-loops.\r\n                    </ListItem>\r\n                </List>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Example: Convert a list of temperatures from Celsius to Fahrenheit:\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`celsius = [0, 10, 20, 30]\\nfahrenheit = [(temp * 9/5) + 32 for temp in celsius]`}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    Lambda Functions\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Lambda functions, also known as anonymous functions, are small, unnamed functions defined using the `lambda` keyword. These functions are typically used for short, throwaway operations, often as arguments to higher-order functions like `map()`, `filter()`, and `sorted()`.\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Key Points:\r\n                </Typography>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Syntax:\r\n                        </Typography>\r\n                        The basic syntax is `lambda arguments: expression`.\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Usage:\r\n                        </Typography>\r\n                        Ideal for operations that are simple enough to be defined in a single line.\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Higher-Order Functions:\r\n                        </Typography>\r\n                        Commonly used with functions that take other functions as arguments.\r\n                    </ListItem>\r\n                </List>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Example: Use a lambda function to square each number in a list:\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`numbers = [1, 2, 3, 4]\\nsquared = list(map(lambda x: x**2, numbers))`}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    Combining List Comprehensions and Lambda Functions\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Both list comprehensions and lambda functions can be combined with other advanced data operations like `map()`, `filter()`, and `reduce()` to perform complex data transformations concisely and efficiently.\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Example: Filter a list to keep only even numbers and then square them using a list comprehension:\r\n                </Typography>\r\n                <CopyBlock\r\n                    text={`numbers = [1, 2, 3, 4, 5, 6]\\nsquared_evens = [x**2 for x in numbers if x % 2 == 0]`}\r\n                    language=\"python\"\r\n                    theme={dracula}\r\n                    codeBlock\r\n                />\r\n                <Typography variant=\"h6\" component=\"h3\" gutterBottom>\r\n                    Practical Applications\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    These advanced data operations are particularly useful in:\r\n                </Typography>\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Data Cleaning:\r\n                        </Typography>\r\n                        Removing unwanted data, normalizing formats, and transforming data sets.\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                            Data Transformation:\r\n                        </Typography>\r\n                        Quickly generating new data sets from existing ones.\r\n                    </ListItem>\r\n                </List>\r\n                <Typography variant=\"body1\" paragraph>\r\n                    Mastering list comprehensions and lambda functions will significantly enhance your ability to write clean, efficient, and Pythonic code. These techniques are invaluable for data manipulation and are widely used in various applications, from data science to web development. By incorporating these tools into your coding practice, you can handle complex data operations with greater ease and precision.\r\n                </Typography>\r\n                <Box mt={4}>\r\n                    <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/week2/lecture3/questionnaire\">\r\n                        Take the Questionnaire\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Lecture3;\r\n"],"names":["Lecture3","useEffect","completionStatus","JSON","parse","localStorage","getItem","setItem","stringify","_jsx","Paper","style","padding","children","_jsxs","Box","my","Typography","variant","component","gutterBottom","paragraph","CopyBlock","text","language","theme","dracula","codeBlock","List","ListItem","fontWeight","mt","Button","color","RouterLink","to"],"sourceRoot":""}